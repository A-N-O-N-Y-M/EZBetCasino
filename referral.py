from aiogram import Router, types
from aiogram import Bot
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.deep_linking import decode_payload, create_start_link
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db_connection import Database

router = Router()
db = Database()


async def create_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üíé –ü—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile"),
        types.InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referral_system"),
        types.InlineKeyboardButton(text="üí∞ –î–µ–ø–æ–∑–∏—Ç", callback_data="my_deposit"),
        types.InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å—ã", callback_data="bonuses"),
        types.InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"),
        types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    )

    builder.adjust(2, 2, 2)

    return builder.as_markup()


@router.message(Command('start'))
async def cmd_start(message: Message):
    await db.connect()

    keyboard = await create_main_keyboard()

    payload = message.text
    args = payload.split()
    user_id = message.from_user.id

    existing_user = await db.fetch("SELECT * FROM users WHERE user_id = %s", user_id)

    if not existing_user:
        if len(args) > 1:
            try:
                referrer_id = decode_payload(args[1])
                referrer = await db.fetch("SELECT * FROM users WHERE user_id = %s", referrer_id)

                if not referrer or len(referrer) == 0:
                    await message.answer("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.", reply_markup=keyboard)
                    return

                referrer = referrer[0]

                if not referrer['can_invite']:
                    await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                                         reply_markup=keyboard)
                    return

                await db.execute(
                    "INSERT INTO users (user_id, has_used_referral, deposit) VALUES (%s, %s, %s)",
                    (user_id, 1, 500)  # –î–æ–±–∞–≤–ª—è–µ–º 500 —Ä—É–±–ª–µ–π –±–æ–Ω—É—Å–∞
                )
                await db.execute(
                    "INSERT INTO referrals (user_id, referrer_id) VALUES (%s, %s)",
                    (user_id, referrer_id)
                )

                await db.execute(
                    "UPDATE users SET deposit = deposit + 500 WHERE user_id = %s",
                    (referrer_id,)
                )

                await message.answer(
                    "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å 500 —Ä—É–±–ª–µ–π!\n"
                    "üíµ –í–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏–ª 500 —Ä—É–±–ª–µ–π –±–æ–Ω—É—Å–∞!",
                    reply_markup=keyboard
                )
                return

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
                await message.answer(
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EZBet Casino!",
                    reply_markup=keyboard
                )
                return

        else:
            await db.execute(
                "INSERT INTO users (user_id, has_used_referral, deposit) VALUES (%s, %s, %s)",
                (user_id, 0, 0)
            )
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EZBet Casino! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π "
                "–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ 500 —Ä—É–±–ª–µ–π –∫–∞–∂–¥–æ–º—É!",
                reply_markup=keyboard
            )
            return

    if len(args) > 1:
        try:
            referrer_id = decode_payload(args[1])

            if referrer_id == user_id:
                await message.answer(
                    "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!",
                    reply_markup=keyboard
                )
                return

            existing_referral = await db.fetch(
                "SELECT * FROM referrals WHERE user_id = %s",
                (user_id,)
            )
            if existing_referral:
                await message.answer(
                    "–í—ã —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ã.",
                    reply_markup=keyboard
                )
                return

            referrer = await db.fetch(
                "SELECT * FROM users WHERE user_id = %s",
                (referrer_id,)
            )

            if not referrer or len(referrer) == 0:
                await message.answer(
                    "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.",
                    reply_markup=keyboard
                )
                return

            referrer = referrer[0]

            if not referrer['can_invite']:
                await message.answer(
                    "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    reply_markup=keyboard
                )
                return

            user_data = await db.fetch(
                "SELECT * FROM users WHERE user_id = %s",
                (user_id,)
            )
            if not user_data or len(user_data) == 0:
                await message.answer(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=keyboard
                )
                return

            user_data = user_data[0]

            if not user_data['has_used_referral']:
                await message.answer(
                    "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–Ω–µ–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.",
                    reply_markup=keyboard
                )
                return

            await db.execute(
                "INSERT INTO referrals (user_id, referrer_id) VALUES (%s, %s)",
                (user_id, referrer_id)
            )
            await db.execute(
                "UPDATE users SET deposit = deposit + 500 WHERE user_id = %s",
                (user_id,)
            )
            await db.execute(
                "UPDATE users SET deposit = deposit + 500 WHERE user_id = %s",
                (referrer_id,)
            )

            await message.answer(
                "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å 500 —Ä—É–±–ª–µ–π!\n"
                "üíµ –í–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏–ª 500 —Ä—É–±–ª–µ–π –±–æ–Ω—É—Å–∞!",
                reply_markup=keyboard
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.",
                reply_markup=keyboard
            )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ EZBet Casino!",
            reply_markup=keyboard
        )


@router.callback_query(lambda c: c.data == "my_profile")
async def show_profile(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_data = await db.fetch("SELECT * FROM users WHERE user_id = %s", (user_id,))

    if user_data:
        user_data = user_data[0]
        text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üÜî ID: {user_id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data.get('deposit', 0)} —Ä—É–±.\n"
            f"üìä –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {await get_referrals_count(user_id)}"
        )
    else:
        text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

    await callback.message.edit_text(text, reply_markup=await create_main_keyboard())
    await callback.answer()


@router.callback_query(lambda c: c.data == "referral_system")
async def show_referral_info(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    referrals_count = await get_referrals_count(user_id)
    referral_link = await create_start_link(bot, str(user_id), encode=True)

    text = (
        "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {referrals_count}\n"
        f"üí∞ –î–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count * 500} —Ä—É–±.\n\n"
        "üíµ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –∏ –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ 500 —Ä—É–±–ª–µ–π!"
    )

    await callback.message.edit_text(text, reply_markup=await create_main_keyboard())
    await callback.answer()


@router.callback_query(lambda c: c.data == "my_deposit")
async def show_deposit(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_data = await db.fetch("SELECT deposit FROM users WHERE user_id = %s", (user_id,))

    if user_data:
        deposit = user_data[0]['deposit']
        text = f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: {deposit} —Ä—É–±."
    else:
        text = "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    await callback.message.edit_text(text, reply_markup=await create_main_keyboard())
    await callback.answer()


async def get_referrals_count(user_id):
    referrals = await db.fetch(
        "SELECT COUNT(*) as count FROM referrals WHERE referrer_id = %s",
        (user_id,)
    )
    return referrals[0]['count'] if referrals else 0